install.packages(ggplot2)
install.packages("ggplot2")
?install.packages
install.packages(c("devtools", "xts", "wordcloud", "XML", "streamR", "slidify", "scrapeR" , "ROAuth",  "roxygen2" , "extrafont", "extrafontdb" , "maps" , "maptools" ,"markdown", "plyr" ,"RColorBrewer","RCurl","rgdal","RgoogleMaps"                  "rjson", "RJSONIO"))
install.packages(c("devtools", "xts", "wordcloud", "XML"))
install.packages(c("streamR", "slidify", "scrapeR" , "ROAuth",  "roxygen2" , "extrafont", "extrafontdb" , "maps" , "maptools" ,"markdown", "plyr" ,"RColorBrewer","RCurl","rgdal","RgoogleMaps"                  "rjson", "RJSONIO"))#
)
install.packages(c("streamR", "slidify", "scrapeR" , "ROAuth",  "roxygen2" , "extrafont", "extrafontdb" , "maps" , "maptools" ,"markdown", "plyr" ,"RColorBrewer","RCurl","rgdal","RgoogleMaps",rjson", "RJSONIO"))#
)
install.packages(c("streamR", "slidify", "scrapeR" , "ROAuth",  "roxygen2" , "extrafont", "extrafontdb" , "maps" , "maptools" ,"markdown", "plyr" ,"RColorBrewer","RCurl","rgdal","RgoogleMaps",rjson", "RJSONIO"))
install.packages(c("streamR", "slidify", "scrapeR" , "ROAuth",  "roxygen2" , "extrafont", "extrafontdb" , "maps" , "maptools" ,"markdown", "plyr" ,"RColorBrewer","RCurl","rgdal","RgoogleMaps","rjson", "RJSONIO"))
require(devtools)#
install_github('rCharts', 'ramnathv')
library(rCharts)
names(iris) = gsub("\\.", "", names(iris))#
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
library("twitteR")#
#
###  -------------------------------------------------------------------------------------------------------------  ####
###      SETTINGS#
###  -------------------------------------------------------------------------------------------------------------  ####
#
consumerKey <- 'mt9qH6vdPhFpLkxVRaNG1g'#
consumerSecret <- 'ukGV17Ox8BJgs0GDUVI8buBtXBfaZiiYMYRp31AMr0c'#
searchWords <- c("#swiss", "#switzerland")#
savedTweets <- "savedTweets.Rdata"#
#
runTweetSearch <- FALSE#
maxTweet <- 200
ary("twitteR")#
#
###  -------------------------------------------------------------------------------------------------------------  ####
###      SETTINGS#
###  -------------------------------------------------------------------------------------------------------------  ####
#
consumerKey <- 'mt9qH6vdPhFpLkxVRaNG1g'#
consumerSecret <- 'ukGV17Ox8BJgs0GDUVI8buBtXBfaZiiYMYRp31AMr0c'#
searchWords <- c("#swiss", "#switzerland")#
savedTweets <- "savedTweets.Rdata"#
#
runTweetSearch <- FALSE#
maxTweet <- 200
library("twitteR")#
#
###  -------------------------------------------------------------------------------------------------------------  ####
###      SETTINGS#
###  -------------------------------------------------------------------------------------------------------------  ####
#
consumerKey <- 'mt9qH6vdPhFpLkxVRaNG1g'#
consumerSecret <- 'ukGV17Ox8BJgs0GDUVI8buBtXBfaZiiYMYRp31AMr0c'#
searchWords <- c("#swiss", "#switzerland")#
savedTweets <- "savedTweets.Rdata"#
#
runTweetSearch <- FALSE#
maxTweet <- 200
require(devtools)
install_github('rCharts', 'ramnathv')
names(iris) = gsub("\\.", "", names(iris))#
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')#
#
## Example 2 Facetted Barplot#
hair_eye = as.data.frame(HairEyeColor)#
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
library(rCharts)
names(iris) = gsub("\\.", "", names(iris))#
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')#
#
## Example 2 Facetted Barplot#
hair_eye = as.data.frame(HairEyeColor)#
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
slopegraph <-#
function(#
df,#
xlim = c(.5,ncol(df)+.5),#
ylim = c(min(df)-diff(range(df))/100,max(df)+diff(range(df))/100),#
main = NULL,#
bty = 'n',#
yaxt = 'n',#
xaxt = 'n',#
xlab = '',#
ylab = '',#
add.before = NULL, # an expression to add something between drawing the blank canvas and adding the plot content (i.e., behind the slopegraph)#
add.after = NULL, # an expression to add something after adding the plot content#
labels = names(df),#
labpos.left = 2,#
labpos.right = 4,#
col.lines = par('fg'),#
col.lab = par('fg'),#
col.num = par('fg'),#
col.xaxt = par('fg'),#
offset.x = .1, # THIS DOESN'T SEEM TO WORK???#
offset.lab = .1,#
binval = 1.5, # threshold at which to force binning of labels and values (multiplier of the height of an "m")#
cex.lab = 1,#
cex.num = 1,#
font.lab = 1,#
font.num = 1,#
lty = par("lty"),#
lwd = par("lwd"),#
mai = NULL,#
...)#
{#
    if(ncol(df) < 2)#
        stop('`df` must have at least two columns')#
    # draw margins#
    if(is.null(mai))#
        par(mai=c(1, 0, if(is.null(main)) 0 else 1, 0))#
    else#
        par(mai=mai)#
    plot(NA, y=NULL, xlim=xlim, ylim=ylim, main=main,#
         bty=bty, yaxt=yaxt, xaxt=xaxt, xlab=xlab, ylab=ylab, ...)#
    # optional expression#
    if(!is.null(add.before))#
        eval(add.before)#
    # x-axis#
    axis(1, 1:ncol(df), labels=labels, col=col.xaxt, col.ticks=col.xaxt)#
    # height and width of 'm' on plotting device#
    h <- strheight('m')#
    w <- strwidth('m')#
    # function for finding consecutive indices#
    # from: http://stackoverflow.com/a/16118320/2338862#
    seqle <- function(x,incr=1) { #
        if(!is.numeric(x)) x <- as.numeric(x) #
        n <- length(x)  #
        y <- x[-1L] != x[-n] + incr #
        i <- c(which(y|is.na(y)),n) #
        list(lengths = diff(c(0L,i)),#
             values = x[head(c(0L,i)+1L,-1L)]) #
    } #
    overlaps <- function(coldf, cat='rownames'){#
        # conditionally remove exactly duplicated values#
        if(any(duplicated(coldf[,1]))){#
            u <- unique(coldf[,1])#
            out <- cbind.data.frame(t(sapply(u, function(i)#
                c(paste(rownames(coldf)[coldf[,1]==i],collapse='\n'),i))))#
            rownames(out) <- out[,1]#
            out[,1] <- NULL#
            names(out) <- names(coldf)#
            out[,1] <- as.numeric(as.character(out[,1]))#
            coldf <- out[order(out[,1]),,drop=FALSE]#
        }#
        # function to fix overlaps#
        overlaps <- which(abs(diff(coldf[,1]))<(binval*h))#
        if(length(overlaps)){#
            runs <- seqle(overlaps) # use seqle function#
            overlaps2 <- mapply(function(i,j) seq(i,length.out=j+1), runs$values, runs$lengths)#
            oldlabs <- coldf[-unique(c(overlaps,overlaps+1)),,drop=FALSE]#
            newlabs <- data.frame(sapply(overlaps2, function(i) mean(coldf[i,1])))#
            names(newlabs) <- names(coldf)#
            if(cat=='rownames'){#
                rownames(newlabs) <- #
                    sapply(overlaps2, function(i) paste(rownames(coldf)[rev(i)],collapse='\n'))#
            } else if(cat=='values'){#
                rownames(oldlabs) <- oldlabs[,1]#
                rownames(newlabs) <-#
                    sapply(overlaps2, function(i) paste(as.character(coldf[rev(i),1]),collapse='\n'))#
            }#
            return(rbind(oldlabs,newlabs))#
        } else#
            return(coldf)#
    }#
    # left-side labels#
    l <- overlaps(df[order(df[,1]),1,drop=FALSE])#
    text(1-offset.lab, l[,1],#
         col=col.lab, rownames(l), pos=labpos.left, cex=cex.lab, font=font.lab)#
    # right-side labels#
    r <- overlaps(df[order(df[,ncol(df)]),ncol(df),drop=FALSE])#
    text(ncol(df)+offset.lab, r[,1], #
         col=col.lab, rownames(r), pos=labpos.right, cex=cex.lab, font=font.lab)#
    # numeric value labels#
    valslist <- lapply(seq_along(df), function(i) overlaps(df[order(df[,i]),i,drop=FALSE], cat='values'))#
    for(i in 1:length(valslist)){#
        text(rep(i,nrow(valslist[[i]])), valslist[[i]][,1], rownames(valslist[[i]]),#
            col=col.num, cex=cex.num, font=font.num)#
    }#
    # draw lines#
    offset.x <- .1 # small offset for `segments`#
    col.lines <- rep(col.lines, length.out=nrow(df))#
    lty <- rep(lty, length.out=nrow(df))#
    lwd <- rep(lwd, length.out=nrow(df))#
    for(i in 1:nrow(df)){#
        mapply(function(x1,y1,x2,y2,...){#
            ysloped <- (y2-y1)*offset.x#
            segments(x1+offset.x, if(y1==y2) y1 else (y1+ysloped),#
                     x2-offset.x, if(y1==y2) y2 else (y2-ysloped),#
                     col=col.lines[i],#
                     lty=lty[i],#
                     lwd=lwd[i]#
                    )},#
               1:(length(df[i,])-1), # x1-positions#
               df[i,][-length(df[i,])], # y1-positions#
               2:(length(df[i,])), # x2-positions#
               df[i,][-1] # y2-positions#
               )#
    }#
    # optional expression#
    if(!is.null(add.after))#
        eval(add.after)#
    # return invisibly#
    invisible(NULL)#
}#
# EXAMPLES#
## Tufte's Cancer Graph (to the correct scale)#
cancer <- read.csv('tufte-cancer-survival-data.csv')#
rownames(cancer) <- cancer[,1]#
cancer <- cancer [,-1]
require(devtools)#
install_github('ramnathv/rCharts@dev')#
install_github('ramnathv/rMaps')
library(rMaps)#
crosslet(#
  x = "country", #
  y = c("web_index", "universal_access", "impact_empowerment", "freedom_openness"),#
  data = web_index#
)
ichoropleth(Crime ~ State, data = subset(violent_crime, Year == 2010))
ichoropleth(Crime ~ State, data = violent_crime, animate = "Year")
ichoropleth(Crime ~ State, data = violent_crime, animate = "Year", play = TRUE)
map <- Leaflet$new()#
map$setView(c(51.505, -0.09), zoom = 13)#
map$tileLayer(provider = 'Stamen.Watercolor')#
map$marker(#
  c(51.5, -0.09),#
  bindPopup = 'Hi. I am a popup'#
)#
map
?as.POSIXct
quarters.Date
'quarters.Date
?quarters.Date
setwd('/Users/dqn/Google Drive/swissinfo/2014_02_13 emploiEtranger')
source("~/swissinfo/_helpers/helpers.R")#
test <- data.frame(x = 1:10, y = c(-5:-1, c(11,11,11, 15,15)), z = c(2,2,2, 4:7, 9,9,9), row.names = letters[1:10])#
test.col <- rep(c("green", "red", "blue", "green", "blue"), 2)#
slopegraphOld(test, rescaleByColumn = F, col.line=test.col, col.lab=test.col, , cex.lab = 0.6, cex.num = 0.6, offset.x = 0.05)
setwd('/Users/dqn/Google Drive/swissinfo/_helpers')
lab.dup <- sapply(leftlabs, length) > 1
lab.dup
setwd('/Users/dqn/Google Drive/swissinfo/_helpers')
text(1 - offset.lab, as.numeric(names(leftlabs)[!lab.dup]),#
         col=col.lab[!duplicated(l)], leftlabs[!lab.dup], pos=leftlabs, cex=cex.lab, font=font.lab)
setwd('/Users/dqn/Google Drive/swissinfo/_helpers')
as.numeric(names(leftlabs)[!lab.dup])
setwd('/Users/dqn/Google Drive/swissinfo/_helpers')
col=col.lab[!duplicated(l)]
col
